import { Component, OnInit } from '@angular/core';
import { ToastrService } from 'ngx-toastr';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { FinalExamCriteriaService } from '../final-exam-criteria.service';
import { FinalExamCriteria } from '../models/final-exam-criteria.model';

@Component({
  selector: 'app-final-exam-criteria',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './final-exam-criteria.component.html',
  styleUrls: ['./final-exam-criteria.component.css']
})
export class FinalExamCriteriaComponent implements OnInit {
  criteriaList: FinalExamCriteria[] = [];
  currentCriteria: FinalExamCriteria = { id: 0, minMarks: 0, maxMark: 0, grade: '' };
  isEditing = false;
  grades: string[] = ['A+', 'A', 'A-', 'B+', 'B', 'B-', 'C+', 'C', 'C-', 'D+', 'D', 'D-', 'E', 'F'];

  constructor(private finalExamCriteriaService: FinalExamCriteriaService, private toastr: ToastrService) { }

  ngOnInit(): void {
    this.loadCriteria();
  }

  loadCriteria(): void {
    this.finalExamCriteriaService.getAllFinalExamCriteria().subscribe(data => {
      this.criteriaList = data;
    });
  }

  addOrUpdateCriteria(): void {
    if (this.isEditing) {
      this.finalExamCriteriaService.updateFinalExamCriteria(this.currentCriteria.id, this.currentCriteria).subscribe({
        next: () => {
          this.toastr.success('Criteria updated successfully');
          this.loadCriteria();
          this.resetForm();
        },
        error: (err) => {
          this.toastr.error('Failed to update criteria');
          console.error(err);
        }
      });
    } else {
      // Exclude the 'id' when creating a new criterion, as it's generated by the server.
      const { id, ...newCriteria } = this.currentCriteria;
      this.finalExamCriteriaService.createFinalExamCriteria(newCriteria as FinalExamCriteria).subscribe({
        next: () => {
          this.toastr.success('Criteria added successfully');
          this.loadCriteria();
          this.resetForm();
        },
        error: (err) => {
          this.toastr.error('Failed to add criteria');
          console.error(err);
        }
      });
    }
  }

  editCriteria(criteria: FinalExamCriteria): void {
    this.isEditing = true;
    this.currentCriteria = { ...criteria };
  }

  deleteCriteria(id: number): void {
    if (confirm('Are you sure you want to delete this criteria?')) {
      this.finalExamCriteriaService.deleteFinalExamCriteria(id).subscribe({
        next: () => {
          this.toastr.success('Criteria deleted successfully');
          this.loadCriteria();
        },
        error: (err) => {
          this.toastr.error('Failed to delete criteria');
          console.error(err);
        }
      });
    }
  }

  resetForm(): void {
    this.isEditing = false;
    this.currentCriteria = { id: 0, minMarks: 0, maxMark: 0, grade: '' };
  }
}
